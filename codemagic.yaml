workflows:
  android-workflow:
    name: Android Workflow
    max_build_duration: 120
    instance_type: mac_mini_m1
    environment:
      flutter: 3.19.3
      xcode: latest
      java: 17.0.0  # Use Java 17 for AGP 8.1.0
      groups:
        - google_credentials # <-- For Google Play publishing (if needed)
      vars:
        PACKAGE_NAME: "com.example.app_md" # <-- Use your app's actual bundle ID
    cache:
      cache_paths:
        - ~/.pub-cache
        - ~/.gradle/caches
    scripts:
      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
      - name: Get Flutter packages and upgrade dependencies
        script: |
          flutter pub get
          flutter pub upgrade --major-versions
      - name: Fix compile SDK issue
        script: |
          echo "compileSdkVersion = 34" > "$CM_BUILD_DIR/android/app/build.gradle.new"
          sed -e 's/compileSdkVersion flutter.compileSdkVersion/compileSdkVersion 34/g' "$CM_BUILD_DIR/android/app/build.gradle" > "$CM_BUILD_DIR/android/app/build.gradle.new"
          mv "$CM_BUILD_DIR/android/app/build.gradle.new" "$CM_BUILD_DIR/android/app/build.gradle"
      - name: Build Release AAB
        script: |
          flutter build appbundle --release
    artifacts:
      - build/app/outputs/bundle/release/app-release.aab
      
  ios-adhoc-workflow:
    name: iOS Ad-Hoc Distribution
    max_build_duration: 120
    instance_type: mac_mini_m1
    environment:
      flutter: 3.19.3
      xcode: latest
      ios_signing:
        distribution_type: ad-hoc  # Ad-Hoc allows distribution to specific registered devices
        bundle_identifier: com.example.app_md  # Must match your app's bundle ID
      vars:
        BUNDLE_ID: "com.example.app_md"  # Same as bundle_identifier above
    integrations:
      app_store_connect: codemagic  # Connect to App Store Connect for provisioning
    cache:
      cache_paths:
        - ~/.pub-cache
    scripts:
      - name: Get Flutter packages
        script: |
          flutter pub get
      - name: Install CocoaPods
        script: |
          cd ios
          pod install
      - name: Set up iOS code signing
        script: |
          # Initialize keychain
          keychain initialize
          
          # Fetch signing files from App Store Connect
          # If you already have a provisioning profile, specify:
          # --profile-name "YourAdHocProfile"
          app-store-connect fetch-signing-files "$BUNDLE_ID" \
            --type IOS_APP_ADHOC \
            --create
            
          # Add certificates to keychain
          keychain add-certificates
          
          # Update project settings to use fetched profiles
          xcode-project use-profiles
          
          # Verify code signing settings
          echo "iOS code signing setup completed."
          
      - name: Update Bundle ID
        script: |
          # Replace com.example.appMd with your actual bundle ID in Xcode project
          plutil -replace CFBundleIdentifier -string "$BUNDLE_ID" "$CM_BUILD_DIR/ios/Runner/Info.plist"
          
      - name: Build iOS IPA for distribution
        script: |
          # Build a signed IPA file for ad-hoc distribution
          flutter build ipa --release \
            --export-options-plist=/Users/builder/export_options.plist
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
    publishing:
      email:
        recipients:
          - your.email@example.com  # Replace with your email address
        notify:
          success: true
          failure: true